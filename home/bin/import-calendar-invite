#!/usr/bin/env bash
# Import calendar invites (.ics files) from email to calendar using khal

set -euo pipefail

# Default calendar
CALENDAR="Personal"

# Parse command line arguments
while getopts "c:h" opt; do
    case "$opt" in
        c)
            CALENDAR="$OPTARG"
            ;;
        h)
            echo "Usage: $0 [-c calendar] [file]"
            echo "Import .ics calendar invites to calendar"
            echo ""
            echo "Options:"
            echo "  -c calendar  Calendar name (default: Personal)"
            echo "  file         File to import (reads from stdin if not provided)"
            exit 0
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            exit 1
            ;;
    esac
done

shift $((OPTIND - 1))

# Create temp directory
TMPDIR=$(mktemp -d)
trap 'rm -rf $TMPDIR' EXIT

# Function to extract calendar from email
extract_calendar_from_email() {
    local email_file="$1"
    local tmpdir="$2"

    # Find calendar parts
    local calendar_parts
    calendar_parts=$(mshow -t "$email_file" 2>/dev/null | grep -E "(text/calendar|application/ics|\.ics)" | awk '{print $1}' | tr -d ':')

    if [ -z "$calendar_parts" ]; then
        return 1
    fi

    # Extract each calendar part
    local i=0
    for part in $calendar_parts; do
        # Use mshow -O for proper decoding
        if mshow -O "$email_file" "$part" >"$tmpdir/calendar_$i.ics" 2>/dev/null; then
            echo "$tmpdir/calendar_$i.ics"
            i=$((i + 1))
        fi
    done

    return 0
}

# Main logic
if [ $# -eq 0 ]; then
    # Read from stdin
    EMAIL_FILE="$TMPDIR/email.eml"
    cat >"$EMAIL_FILE"

    # Always try to extract from email first, even if it contains VCALENDAR
    # because emails with calendar attachments will have both email headers and calendar data
    mapfile -t CALENDAR_FILES < <(extract_calendar_from_email "$EMAIL_FILE" "$TMPDIR")

    # If no calendar parts found, check if it's direct calendar data
    if [ ${#CALENDAR_FILES[@]} -eq 0 ] && grep -q "BEGIN:VCALENDAR" "$EMAIL_FILE" && ! head -n 20 "$EMAIL_FILE" | grep -q "Content-Type:"; then
        # Direct calendar data
        CALENDAR_FILES=("$EMAIL_FILE")
    fi
else
    # File provided as argument
    FILE="$1"
    if [ ! -f "$FILE" ]; then
        echo "Error: File '$FILE' not found" >&2
        exit 1
    fi

    if [[ "$FILE" == *.ics ]]; then
        # Direct .ics file
        CALENDAR_FILES=("$FILE")
    else
        # Assume it's an email
        mapfile -t CALENDAR_FILES < <(extract_calendar_from_email "$FILE" "$TMPDIR")
    fi
fi

# Check if we found any calendar files
if [ ${#CALENDAR_FILES[@]} -eq 0 ]; then
    echo "No .ics files found in the input" >&2
    exit 1
fi

# Import using khal
IMPORTED=0
for ics_file in "${CALENDAR_FILES[@]}"; do
    if [ -f "$ics_file" ]; then
        if grep -q "BEGIN:VCALENDAR" "$ics_file"; then
            echo "Importing calendar from: $(basename "$ics_file")"
            if khal import --batch -a "$CALENDAR" "$ics_file" >/dev/null 2>&1; then
                IMPORTED=$((IMPORTED + 1))
                echo "Successfully imported $(basename "$ics_file")"
            else
                echo "Warning: Failed to import $(basename "$ics_file")" >&2
            fi
        else
            echo "Warning: $(basename "$ics_file") does not contain valid calendar data" >&2
        fi
    else
        echo "Warning: File not found: $ics_file" >&2
    fi
done

if [ $IMPORTED -eq 0 ]; then
    echo "Failed to import any calendar invites" >&2
    exit 1
else
    echo "Imported $IMPORTED calendar invite(s)"
fi

# Sync with server
echo "Syncing with server..."
vdirsyncer sync || true

echo "Successfully imported $IMPORTED calendar invite(s) to $CALENDAR"
