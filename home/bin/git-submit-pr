#!/usr/bin/env python3

import subprocess
import sys
import argparse
import shutil
import os
from dataclasses import dataclass


class Error(Exception):
    pass


def get_commits_between_head_and_upstream() -> list[str]:
    """
    Get a list of all commits between HEAD and the tracked upstream branch.
    Returns:
        List[str]: List of commit hashes (in reverse chronological order).
    """
    try:
        # Get the upstream branch reference
        upstream_branch = subprocess.run(
            ["git", "rev-parse", "--abbrev-ref", "--symbolic-full-name", "@{u}"],
            text=True,
            check=True,
            stdout=subprocess.PIPE,
        ).stdout.strip()

        # Get all commits between HEAD and the upstream branch
        commits = (
            subprocess.run(
                ["git", "log", "--reverse", "--format=%H", f"{upstream_branch}..HEAD"],
                text=True,
                check=True,
                stdout=subprocess.PIPE,
            )
            .stdout.strip()
            .split("\n")
        )

    except subprocess.CalledProcessError as e:
        msg = f"Error while running git command: {e}"
        raise Error(msg) from e
    else:
        return commits


def find_commit_index(commit_hash: str, commits: list[str]) -> int:
    """
    Find the index of a specific commit in the list of commits.
    Args:
        commit_hash (str): The commit hash to find.
        commits (List[str]): The list of commits.

    Returns:
        int: The index of the commit in the list, or -1 if not found.
    """
    try:
        return commits.index(commit_hash)
    except ValueError:
        return -1


@dataclass
class Args:
    commit_hash: str
    branch: str | None = None
    label: str | None = None


def run_treefmt(target_branch: str) -> None:
    if shutil.which("treefmt"):
        result = subprocess.run(["treefmt", "--fail-on-change"], check=False)
        if result.returncode == 0:
            return
    else:
        current_system = subprocess.run(
            ["nix", "config", "show", "system"],
            check=True,
            text=True,
            stdout=subprocess.PIPE,
        ).stdout.strip()

        has_treefmt = f"(val: val ? {current_system} && (val.{current_system}.name == 'treefmt' || val.{current_system}.name == 'treefmt-nix'))"
        result = subprocess.run(
            ["nix", "eval", ".#formatter", "--apply", has_treefmt],
            stdout=subprocess.PIPE,
            check=False,
            text=True,
        )

        if result.stdout.strip() != "true":
            return

        formatter = subprocess.run(
            [
                "nix",
                "build",
                "-o",
                ".git/treefmt",
                f".#formatter.{current_system}",
                "--print-out-paths",
            ],
            stdout=subprocess.PIPE,
            check=True,
            text=True,
        ).stdout.strip()

        result = subprocess.run(
            [f"{formatter}/bin/treefmt", "--fail-on-change"],
            check=False,
        )
        if result.returncode == 0:
            return

    subprocess.run(
        ["git", "absorb", "--force", "--and-rebase", f"--base=origin/{target_branch}"],
        check=True,
    )
    subprocess.run(["lazygit"], check=False)
    msg = "Treefmt failed, please fix the formatting and try again."
    raise Error(msg)


def submit_pr(args: Args) -> None:
    # Get all commits
    commits = get_commits_between_head_and_upstream()

    # Find the index of the specified commit
    index = find_commit_index(args.commit_hash, commits)

    if index == -1:
        msg = f"Commit {args.commit_hash} not found in the range between HEAD and the upstream branch."
        raise Error(msg)

    command = ["gps", "request-review"]
    if args.branch:
        command.extend(["--branch", args.branch])
    command.append(str(index))

    env = os.environ.copy()
    if args.label:
        env["GITHUB_LABEL"] = args.label
    subprocess.run(
        command,
        text=True,
        check=True,
        env=env,
    )


def parse_args() -> Args:
    parser = argparse.ArgumentParser(
        description="Submit a pull request for a specific commit."
    )
    parser.add_argument(
        "--branch",
        help="The branch to submit a pull request for. Defaults to the current branch.",
    )
    parser.add_argument(
        "--label",
        help="The label to apply to the pull request",
    )
    parser.add_argument(
        "commit_hash", help="The commit hash to submit a pull request for."
    )
    args = parser.parse_args()
    return Args(args.commit_hash, args.branch, args.label)


def main() -> None:
    args = parse_args()
    try:
        submit_pr(args)
    except Error as e:
        print(f"[{sys.argv[0]}]: {e}", file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main()
