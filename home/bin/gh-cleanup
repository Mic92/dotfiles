#!/usr/bin/env python3
"""
GitHub Notification Dismissal Tool

Analyzes GitHub notifications using discussion-based criteria to safely dismiss
resolved/inactive notifications while preserving active ones.

Usage:
    gh-dismiss-notifications [--batch-size N] [--dry-run] [--help]

Options:
    --batch-size N    Number of notifications to analyze per batch (default: 50)
    --dry-run        Show what would be dismissed without actually dismissing
    --help           Show this help message
"""

import argparse
import json
import subprocess
import sys
import time
from datetime import UTC, datetime
from typing import Any


def fetch_all_notifications() -> list[dict[str, Any]]:
    """Fetch all notifications using GitHub CLI with pagination"""
    try:
        cmd = ["gh", "api", "/notifications", "--paginate"]
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        return json.loads(result.stdout)
    except subprocess.CalledProcessError as e:
        print(f"Error fetching notifications: {e.stderr}", file=sys.stderr)
        return []
    except json.JSONDecodeError as e:
        print(f"Error parsing JSON: {e}", file=sys.stderr)
        return []


def get_issue_or_pr_details(url: str) -> dict[str, Any] | None:
    """Get issue/PR details including state"""
    try:
        # Extract repo and number from URL
        parts = url.replace("https://api.github.com/repos/", "").split("/")
        if len(parts) >= 4:
            owner, repo, item_type, number = parts[0], parts[1], parts[2], parts[3]

            # Get issue/PR details
            cmd = ["gh", "api", f"/repos/{owner}/{repo}/{item_type}/{number}"]
            result = subprocess.run(cmd, capture_output=True, text=True, check=True)
            return json.loads(result.stdout)
    except (subprocess.CalledProcessError, json.JSONDecodeError, IndexError) as e:
        print(f"Warning: Could not fetch details for {url}: {e}", file=sys.stderr)
        return None


def analyze_dismissal_safety(
    notification: dict[str, Any], item_data: dict[str, Any] | None
) -> tuple[bool, str]:
    """
    Analyze if notification can be safely dismissed based on discussion state.

    Returns (is_safe, reason) tuple where:
    - is_safe: boolean indicating if safe to dismiss
    - reason: string explaining the decision
    """
    if not item_data:
        return False, "No item data available"

    state = item_data.get("state", "unknown")
    reason = notification.get("reason", "unknown")
    now = datetime.now(UTC)

    # Already closed/merged items (give a few days buffer for follow-up)
    if state in ["closed", "merged"] and item_data.get("closed_at"):
        closed_at = datetime.fromisoformat(
            item_data["closed_at"].replace("Z", "+00:00")
        )
        days_since_closed = (now - closed_at).days
        if days_since_closed > 3:
            return True, f"Closed/merged {days_since_closed} days ago"

    # Draft PRs with no recent activity
    if item_data.get("draft") and item_data.get("updated_at"):
        updated_at = datetime.fromisoformat(
            item_data["updated_at"].replace("Z", "+00:00")
        )
        days_since_update = (now - updated_at).days
        if days_since_update > 30:
            return True, f"Draft PR inactive for {days_since_update} days"

    # Old automation notifications (CI, subscriptions, state changes)
    if reason in ["ci_activity", "subscribed", "state_change"] and item_data.get(
        "updated_at"
    ):
        updated_at = datetime.fromisoformat(
            item_data["updated_at"].replace("Z", "+00:00")
        )
        days_since_update = (now - updated_at).days
        if days_since_update > 14:
            return (
                True,
                f"Automation notification, inactive for {days_since_update} days",
            )

    # Old mentions/team_mentions with no recent activity
    if reason in ["mention", "team_mention"] and item_data.get("updated_at"):
        updated_at = datetime.fromisoformat(
            item_data["updated_at"].replace("Z", "+00:00")
        )
        days_since_update = (now - updated_at).days
        if days_since_update > 21:
            return True, f"Old {reason}, inactive for {days_since_update} days"

    # Old comment notifications
    if reason == "comment" and item_data.get("updated_at"):
        updated_at = datetime.fromisoformat(
            item_data["updated_at"].replace("Z", "+00:00")
        )
        days_since_update = (now - updated_at).days
        if days_since_update > 21:
            return True, f"Old comment, inactive for {days_since_update} days"

    # Author notifications for closed items
    if reason == "author" and state in ["closed", "merged"]:
        return True, f"Author notification for {state} item"

    return False, "Needs manual review"


def dismiss_notification(thread_id: str, dry_run: bool = False) -> bool:
    """Dismiss a notification by thread ID"""
    if dry_run:
        return True

    try:
        cmd = [
            "gh",
            "api",
            "--method",
            "PATCH",
            f"/notifications/threads/{thread_id}",
            "--field",
            "state=read",
        ]
        subprocess.run(cmd, check=True, capture_output=True)
    except subprocess.CalledProcessError as e:
        print(f"Error dismissing notification {thread_id}: {e.stderr}", file=sys.stderr)
        return False
    else:
        return True


def main() -> int:
    parser = argparse.ArgumentParser(
        description="Analyze and dismiss resolved GitHub notifications",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=__doc__,
    )
    parser.add_argument(
        "--batch-size",
        type=int,
        default=50,
        help="Number of notifications to analyze per batch (default: 50)",
    )
    parser.add_argument(
        "--dry-run",
        action="store_true",
        help="Show what would be dismissed without actually dismissing",
    )

    args = parser.parse_args()

    print("Fetching GitHub notifications...")
    all_notifications = fetch_all_notifications()

    if not all_notifications:
        print("No notifications found or error occurred")
        return 1

    print(f"Found {len(all_notifications)} notifications")

    # Sort by age (oldest first) for systematic processing
    now = datetime.now(UTC)
    all_notifications.sort(
        key=lambda x: datetime.fromisoformat(x["updated_at"].replace("Z", "+00:00"))
    )

    # Process in batches
    batch_to_analyze = all_notifications[: args.batch_size]

    if not batch_to_analyze:
        print("No notifications to analyze")
        return 0

    safe_to_dismiss = []
    needs_review = []

    print(f"\nAnalyzing {len(batch_to_analyze)} oldest notifications...")
    print("=" * 100)

    for i, notification in enumerate(batch_to_analyze, 1):
        updated_at = datetime.fromisoformat(
            notification["updated_at"].replace("Z", "+00:00")
        )
        age_days = (now - updated_at).days

        repo = notification.get("repository", {}).get("full_name", "unknown")
        subject_title = notification.get("subject", {}).get("title", "unknown")
        subject_type = notification.get("subject", {}).get("type", "unknown")
        reason = notification.get("reason", "unknown")
        subject_url = notification.get("subject", {}).get("url", "")

        print(f"\n{i:2d}. {age_days:3d}d | {reason:15s} | {subject_type:12s}")
        print(f"    üìç {repo}")
        print(f"    üìù {subject_title[:70]}...")

        # Get detailed information for PRs and Issues only
        item_data = None
        if subject_type in ["PullRequest", "Issue"]:
            item_data = get_issue_or_pr_details(subject_url)

        # Analyze if safe to dismiss
        is_safe, analysis_reason = analyze_dismissal_safety(notification, item_data)

        if is_safe:
            safe_to_dismiss.append(notification)
            print(f"    ‚úÖ SAFE TO DISMISS: {analysis_reason}")
        else:
            needs_review.append(notification)
            print(f"    ‚ö†Ô∏è  NEEDS REVIEW: {analysis_reason}")

        # Rate limiting to be nice to GitHub API
        time.sleep(0.1)

    print("\n" + "=" * 100)
    print("ANALYSIS SUMMARY")
    print("=" * 100)
    print(f"Safe to dismiss: {len(safe_to_dismiss)}")
    print(f"Needs manual review: {len(needs_review)}")
    print(f"Total analyzed: {len(batch_to_analyze)}")
    print(f"Remaining notifications: {len(all_notifications) - len(batch_to_analyze)}")

    # Dismiss safe notifications
    if safe_to_dismiss:
        if args.dry_run:
            print(f"\nüîç DRY RUN: Would dismiss {len(safe_to_dismiss)} notifications")
        else:
            print(f"\nDismissing {len(safe_to_dismiss)} notifications...")

        dismissed_count = 0
        failed_count = 0

        for notification in safe_to_dismiss:
            thread_id = notification["id"]
            repo = notification.get("repository", {}).get("full_name", "unknown")
            subject = notification.get("subject", {}).get("title", "unknown")
            reason = notification.get("reason", "unknown")

            action = "Would dismiss" if args.dry_run else "Dismissing"
            print(f"{action} ({reason}): {repo} - {subject[:30]}...")

            if dismiss_notification(thread_id, args.dry_run):
                dismissed_count += 1
            else:
                failed_count += 1

            time.sleep(0.1)

        if args.dry_run:
            print(f"\nüîç DRY RUN: Would have dismissed {dismissed_count} notifications")
        else:
            print(f"\n‚úÖ Done! Dismissed {dismissed_count} notifications")
            if failed_count > 0:
                print(f"‚ö†Ô∏è  Failed to dismiss {failed_count} notifications")
    else:
        print("\nNo notifications were deemed safe to dismiss.")

    return 0


if __name__ == "__main__":
    sys.exit(main())
