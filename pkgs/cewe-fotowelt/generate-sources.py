#!/usr/bin/env python3

import re
import subprocess
import sys
import urllib.request
from pathlib import Path


def fetch_index(version: str = "8.0.4") -> str:
    """Fetch the index file from CEWE servers."""
    keyaccid = "24441"
    clientid = "148"
    locale = "de_DE"

    index_url = f"https://dls.photoprintit.com/download/Data/{keyaccid}-{locale}/hps/{clientid}-index-{version}.txt"

    print(f"Fetching index from: {index_url}")
    with urllib.request.urlopen(index_url) as response:  # noqa: S310
        # Try different encodings for German text
        content = response.read()
        for encoding in ["iso-8859-1", "windows-1252", "utf-8"]:
            try:
                return content.decode(encoding)
            except UnicodeDecodeError:
                continue
        # If all fail, use latin-1 which accepts all byte values
        return content.decode("latin-1")


def parse_packages(index_content: str, version: str) -> list[dict[str, str]]:
    """Parse packages for Linux x64 and all platforms."""
    packages = []

    for raw_line in index_content.strip().split("\n"):
        line = raw_line.strip()  # Remove whitespace and \r
        if not line:
            continue

        parts = line.split(";")
        if len(parts) >= 4:
            path, required, desc, platform = parts[0:4]
            platform = platform.strip()  # Remove any trailing whitespace

            # Only include Linux x64 and all-platform packages
            if platform in ["l64", "a"] and not path.endswith(".zip"):
                filename = Path(path).name
                # Extract package name from filename
                match = re.match(rf"148-(.+)-{re.escape(version)}_.*\.7z", filename)
                if match:
                    name = match.group(1)
                    url = f"https://dls.photoprintit.com/{path}"
                    packages.append({"name": name, "url": url, "desc": desc})

    return packages


def get_nix_hash(url: str) -> str:
    """Get the SRI hash for a URL using nix-prefetch-url."""
    print(f"Fetching hash for {url.split('/')[-1]}...")

    try:
        # Get the hash using nix-prefetch-url
        result = subprocess.run(
            ["nix-prefetch-url", url], capture_output=True, text=True, check=True
        )
        hash_value = result.stdout.strip()

        # Convert to SRI hash
        sri_result = subprocess.run(
            ["nix", "hash", "to-sri", "--type", "sha256", hash_value],
            capture_output=True,
            text=True,
            check=True,
        )
        return sri_result.stdout.strip()
    except subprocess.CalledProcessError as e:
        print(f"Error fetching hash: {e}")
        return "sha256-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="


def generate_sources_nix(version: str, packages: list[dict[str, str]]) -> str:
    """Generate the sources.nix file."""
    output = [
        "# Generated by generate-sources.py",
        "# DO NOT EDIT MANUALLY",
        "{ fetchurl }:",
        "",
        "{",
        f'  version = "{version}";',
        '  keyAccId = "24441";',
        '  clientId = "148";',
        "",
        "  sources = [",
    ]

    for pkg in packages:
        sri_hash = get_nix_hash(pkg["url"])
        output.extend(
            [
                "    {",
                f'      name = "{pkg["name"]}";',
                "      src = fetchurl {",
                f'        url = "{pkg["url"]}";',
                f'        hash = "{sri_hash}";',
                "      };",
                "    }",
            ]
        )

    output.extend(["  ];", "}"])

    return "\n".join(output)


def main() -> None:
    version = sys.argv[1] if len(sys.argv) > 1 else "8.0.4"

    print(f"Generating sources.nix for CEWE Fotowelt version {version}...")

    try:
        # Fetch and parse index
        index_content = fetch_index(version)
        packages = parse_packages(index_content, version)

        print(f"Found {len(packages)} packages to fetch")

        # Generate sources.nix
        nix_content = generate_sources_nix(version, packages)

        # Write to file
        with Path("sources.nix").open("w") as f:
            f.write(nix_content)

        print("Generated sources.nix successfully!")

    except (OSError, subprocess.CalledProcessError) as e:
        print(f"Error: {e}", file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main()
